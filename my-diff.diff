diff --git a/public/css/rooms.css b/public/css/rooms.css
index f765028..eb76ae7 100644
--- a/public/css/rooms.css
+++ b/public/css/rooms.css
@@ -49,7 +49,6 @@
   color: var(--text-color);
   display: flex;
   flex-direction: column;
-  justify-content: space-between;
   height: 100%;
 }
 
@@ -57,6 +56,7 @@
   font-size: 1.2rem;
   font-weight: 600;
   margin-bottom: 10px;
+  margin-right: 50px;
 }
 
 /* Hidden description on load, appears on hover (nice subtle effect) */
@@ -167,24 +167,35 @@
   content: '▾';
 }
 
-/* Alternatively, rotate the same character 
-   .expand-icon:not(.collapsed) {
-     transform: rotate(90deg);
-   }
-   .expand-icon::before {
-     content: '▸';
-   }
-*/
+/* ======= RECENTLY ACTIVE ======= */
 
+/* .recently-active { */
+  /* margin: 20px 0; */
+/* } */
 
-/* 
-  If you prefer an SVG, you can do:
-  .expand-icon {
-    background: url('data:image/svg+xml;base64,...') no-repeat center center;
-    background-size: contain;
-  }
-  Then rotate the entire container. 
-*/
+/* Room Activity Styling (User Count) */
+.room-tile .room-activity {
+  position: absolute;
+  top: 10px;
+  right: 10px;
+  font-size: 0.8rem;
+  font-weight: 500;
+  color: #666;
+  background: rgba(0, 0, 0, 0.05);
+  padding: 3px 8px;
+  border-radius: 5px;
+  transition: background-color 0.3s ease;
+}
+
+/* Room Tiles: Add Activity on Hover */
+.room-tile .room-activity {
+  opacity: 0;
+  transition: opacity 0.3s ease, display 0.3s ease;
+}
+
+.room-tile:hover .room-activity {
+  background: rgba(0, 0, 0, 0.15);
+}
 
 /* Compact tiles for mobile view */
 @media (max-width: 768px) {
@@ -284,21 +295,25 @@
   background: none;
   border: none;
   color: #555;
-  font-size: 1.5rem; /* Larger for visibility */
+  font-size: 1.5rem;
+  /* Larger for visibility */
   font-weight: bold;
   cursor: pointer;
-  z-index: 10; /* Ensures it's above other content */
+  z-index: 10;
+  /* Ensures it's above other content */
   transition: color 0.2s ease;
 }
 
 .modal-close:hover {
-  color: #000; /* Darker hover state for better visibility */
+  color: #000;
+  /* Darker hover state for better visibility */
 }
 
 /* Optional: Add a more GUI-style feel with padding and border */
 .modal-close:focus {
   outline: 2px solid #aaa;
-  border-radius: 50%; /* Rounded clickable area */
+  border-radius: 50%;
+  /* Rounded clickable area */
 }
 
 
diff --git a/public/js/room-directory.js b/public/js/room-directory.js
index a272c0a..35221a3 100644
--- a/public/js/room-directory.js
+++ b/public/js/room-directory.js
@@ -4,17 +4,35 @@ document.addEventListener('DOMContentLoaded', () => {
   const modalTitle = document.querySelector('.modal-title');
   const modalDescription = document.querySelector('.modal-description');
   const modalLink = document.querySelector('.modal-link');
+  const modalActiveUsers = document.querySelector('.modal-active-users');
   const modalClose = document.querySelector('.modal-close');
 
   const isMobile = () => window.innerWidth <= 768;
 
+  // Fetch active users for a room
+  const fetchActiveUsers = async (roomId) => {
+    try {
+      const response = await fetch(`/api/v1/rooms/active-users/${roomId}`);
+      if (!response.ok) throw new Error('Failed to fetch active users.');
+      const data = await response.json();
+      return data.activeUsers || 0;
+    } catch (error) {
+      console.error(`Error fetching active users for room ${roomId}:`, error.message);
+      return 0;
+    }
+  };
+
   // Collapsible section behavior
   headers.forEach(header => {
     const topicSection = header.nextElementSibling;
     const icon = header.querySelector('.expand-icon');
-    topicSection.classList.add('collapsed');
-    topicSection.style.maxHeight = 0;
-    icon.classList.add('collapsed');
+    if (header.dataset.topic !== 'Recently Active') {
+      topicSection.classList.add('collapsed');
+      topicSection.style.maxHeight = 0;
+      icon.classList.add('collapsed');
+    } else {
+      topicSection.style.maxHeight = topicSection.scrollHeight + 'px';
+    }
 
     header.addEventListener('click', () => {
       if (topicSection.classList.contains('collapsed')) {
@@ -29,19 +47,43 @@ document.addEventListener('DOMContentLoaded', () => {
     });
   });
 
-  // Modal behavior
+  // Dynamic hover behavior for non-recently-active tiles
   document.querySelectorAll('.room-tile').forEach(tile => {
-    const link = tile.querySelector('.room-link');
+    const activeUsersBadge = tile.querySelector('.room-activity');
+    activeUsersBadge.style.display = 'none';
+
+    tile.addEventListener('mouseenter', async () => {
+      if (!isMobile() && !tile.classList.contains('recently-active')) {
+        const roomId = tile.getAttribute('data-room-link').split('/').pop();
+        const activeUsers = await fetchActiveUsers(roomId);
+        activeUsersBadge.textContent = `Active Users: ${activeUsers}`;
+        activeUsersBadge.style.opacity = 1;
+        activeUsersBadge.style.display = 'unset';
+      }
+    });
 
-    tile.addEventListener('click', (e) => {
+    tile.addEventListener('mouseleave', () => {
+      if (!tile.classList.contains('recently-active')) {
+        activeUsersBadge.style.opacity = 0;
+        activeUsersBadge.style.display = 'none';
+      }
+    });
+
+    // Modal behavior for mobile
+    tile.addEventListener('click', async (e) => {
       if (isMobile()) {
         e.preventDefault(); // Prevent link navigation on mobile
         const title = tile.getAttribute('data-room-title');
         const description = tile.getAttribute('data-room-description');
         const href = tile.getAttribute('data-room-link');
+        const roomId = href.split('/').pop();
+        const activeUsers = await fetchActiveUsers(roomId);
+
+        const activeUsersText = `Active Users: ${activeUsers}`;
 
         modalTitle.textContent = title || 'No Title Available';
         modalDescription.textContent = description || 'No Description Available';
+        modalActiveUsers.textContent = activeUsersText;
         modalLink.href = href || '#';
 
         modal.classList.add('visible');
diff --git a/server/api-rooms.js b/server/api-rooms.js
index d37f5a7..bbd5695 100644
--- a/server/api-rooms.js
+++ b/server/api-rooms.js
@@ -1,5 +1,5 @@
 import { Router } from 'express';
-import { fetchAndGroupRooms } from './room-helpers.js';
+import { fetchAndGroupRooms, getActiveUsers } from './room-helpers.js';
 
 const router = Router();
 
@@ -15,6 +15,25 @@ const useRoomAPI = (app) => {
       res.status(500).json({ error: 'Failed to fetch room metadata' });
     }
   });
+
+  router.get('/recently-active', async (req, res) => {
+    try {
+      const recentlyActiveRooms = await getRecentlyActiveRooms(5); // Limit to 5
+      res.status(200).json(recentlyActiveRooms);
+    } catch (error) {
+      res.status(500).json({ error: 'Failed to fetch recently active rooms.' });
+    }
+  });
+
+  router.get('/active-users/:roomId', async (req, res) => {
+    const { roomId } = req.params;
+    try {
+      const activeUsers = await getActiveUsers(roomId);
+      res.status(200).json({ activeUsers });
+    } catch (error) {
+      res.status(500).json({ error: `Failed to fetch active users for room ${roomId}` });
+    }
+  });
 };
 
 export default useRoomAPI;
diff --git a/server/mongo.js b/server/mongo.js
index 3c72953..3b3305e 100644
--- a/server/mongo.js
+++ b/server/mongo.js
@@ -19,7 +19,7 @@ const collectionNames = {
   rooms: 'room-metadata'
 };
 const collections = { session: null, pages: null, backup: null };
-const collectionSuffix = process.env.NODE_ENV === 'production' ? '' : '-test';
+const collectionSuffix = process.env.NODE_ENV === 'production' ? '' : '';
 
 let connection;
 let db;
diff --git a/server/room-helpers.js b/server/room-helpers.js
index c05a1a2..e809e44 100644
--- a/server/room-helpers.js
+++ b/server/room-helpers.js
@@ -3,6 +3,9 @@ import { getCollection, initRoomMetadataCollection } from './mongo.js';
 let cachedTopics = null;
 let cacheExpiration = 0;
 
+let recentlyActiveCache = null;
+let recentlyActiveCacheExpiration = 0;
+
 export async function fetchAndGroupRooms() {
   const now = Date.now();
   if (cachedTopics && now < cacheExpiration) {
@@ -38,4 +41,63 @@ export async function fetchAndGroupRooms() {
     console.error('Error fetching and grouping rooms:', error.message);
     throw error;
   }
+}
+
+export async function getRecentlyActiveRooms(limit = 5) {
+  const now = Date.now();
+
+  // Check if the cache is valid
+  if (recentlyActiveCache && now < recentlyActiveCacheExpiration) {
+    console.log('loaded from the cache');
+    return recentlyActiveCache;
+  }
+
+  try {
+    const sessionData = await getCollection('session');
+    const peerIDsDoc = await sessionData.findOne({ _id: 'peerIDs' });
+
+    if (!peerIDsDoc) return [];
+
+    const activityData = Object.entries(peerIDsDoc)
+      .filter(([key]) => key !== '_id') // Exclude MongoDB ID field
+      .map(([roomId, peers]) => ({
+        roomId,
+        activeUsers: Object.keys(peers).length,
+      }))
+      .sort((a, b) => b.activeUsers - a.activeUsers) // Sort by activity
+      .slice(0, limit); // Limit to top N
+
+    const roomMetadata = await getCollection('rooms');
+    const results = await Promise.all(
+      activityData.map(async ({ roomId, activeUsers }) => {
+        const room = await roomMetadata.findOne({ _id: roomId });
+        return room ? { ...room, activeUsers } : null;
+      })
+    );
+
+    // Filter out null values and store in cache
+    recentlyActiveCache = results.filter(Boolean);
+    recentlyActiveCacheExpiration = now + 60 * 1000; // Cache for 60 seconds
+
+    return recentlyActiveCache;
+  } catch (error) {
+    console.error('Error fetching recently active rooms:', error.message);
+    throw error;
+  }
+}
+
+export async function getActiveUsers(roomId) {
+  try {
+    const sessionData = await getCollection('session');
+    const peerIDsDoc = await sessionData.findOne({ _id: 'peerIDs' });
+
+    if (!peerIDsDoc || !peerIDsDoc[roomId]) {
+      return 0; // No active users
+    }
+
+    return Object.keys(peerIDsDoc[roomId]).length;
+  } catch (error) {
+    console.error(`Error fetching active users for room ${roomId}:`, error.message);
+    throw error;
+  }
 }
\ No newline at end of file
diff --git a/server/rooms-route.js b/server/rooms-route.js
index bff2ce9..cdeb515 100644
--- a/server/rooms-route.js
+++ b/server/rooms-route.js
@@ -1,14 +1,17 @@
 import express from 'express';
-import { fetchAndGroupRooms } from './room-helpers.js';
+import { fetchAndGroupRooms, getRecentlyActiveRooms } from './room-helpers.js';
 
 const router = express.Router();
 
 router.get('/rooms', async (req, res) => {
   try {
     const topics = await fetchAndGroupRooms() || [];
+    const recentlyActiveRooms = await getRecentlyActiveRooms(5);
+    console.log('recently active roooms?', recentlyActiveRooms);
     res.render('rooms', {
       title: 'Room Directory',
       topics,
+      recentlyActiveRooms,
     });
   } catch (error) {
     res.status(500).send('Error fetching room directory.');
diff --git a/views/rooms.pug b/views/rooms.pug
index b18651a..344c3b0 100644
--- a/views/rooms.pug
+++ b/views/rooms.pug
@@ -11,6 +11,24 @@ block content
   if topics.length === 0
     p No rooms are available at the moment. Check back later!
   else
+    if recentlyActiveRooms && recentlyActiveRooms.length > 0
+      .topic-section
+        h2.topic-header(data-topic='Recently Active')
+          span.topic-title Recently Active
+          span.expand-icon
+        .room-grid.collapsible
+          each room in recentlyActiveRooms
+            .room-tile(
+              data-room-title=`${room.name}`
+              data-room-description=`${room.description}`
+              data-room-link=`/rooms/${room._id}`
+              data-room-active-users=`${room.activeUsers || 0}`
+            )
+              a.room-link(href=`/rooms/${room._id}` title=room.name)
+                span.room-title= room.name
+                span.room-description= room.description
+                span.room-activity= `Active Users: ${room.activeUsers}`
+
     each topicGroup in topics
       .topic-section
         h2.topic-header(data-topic=`${topicGroup.topic}`)
@@ -22,15 +40,18 @@ block content
               data-room-title=`${room.name}`
               data-room-description=`${room.description}`
               data-room-link=`/rooms/${room._id}`
+              data-room-active-users=`${room.activeUsers || 0}`
             )
               a.room-link(href=`/rooms/${room._id}` title=room.name)
                 span.room-title= room.name
                 span.room-description= room.description
+                span.room-activity
   // Modal overlay for room details
   .room-modal.hidden
     .room-modal-content
       button.modal-close(type="button" aria-label="Close") ×
       h2.modal-title
       p.modal-description
+      p.modal-active-users
       a.modal-link(href='#', target='_blank') Visit Room
 
